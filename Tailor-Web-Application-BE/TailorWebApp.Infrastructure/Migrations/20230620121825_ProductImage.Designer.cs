// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TailorWebApp.Infrastructure.Data;

#nullable disable

namespace TailorWebApp.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230620121825_ProductImage")]
    partial class ProductImage
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "34d9898f-d312-4d46-b109-11bb40eb12ba",
                            ConcurrencyStamp = "10d52b26-d1f9-4170-b529-3bf6c14db568",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "8a436a18-b376-4cda-83c7-b221dcfc58dd",
                            ConcurrencyStamp = "ebeff00a-aa72-4497-92d0-5a1a59d54ef3",
                            Name = "Content-Creator",
                            NormalizedName = "CONTENT-CREATOR"
                        },
                        new
                        {
                            Id = "Staff",
                            ConcurrencyStamp = "3c7c75e0-fe47-4932-9126-9d478e9a0522",
                            Name = "Staff",
                            NormalizedName = "STAFF"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "90dafc5d-922a-4de8-94cf-4538db5586ab",
                            RoleId = "34d9898f-d312-4d46-b109-11bb40eb12ba"
                        },
                        new
                        {
                            UserId = "90dafc5d-922a-4de8-94cf-4538db5586ab",
                            RoleId = "8a436a18-b376-4cda-83c7-b221dcfc58dd"
                        });
                });

            modelBuilder.Entity("TailorWebApp.Domain.Entities.Accounts.AppUserAccount", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("text");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "90dafc5d-922a-4de8-94cf-4538db5586ab",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "78a61fcb-7c5f-49ba-93c2-94b202a56d40",
                            Email = "admin@admin.com",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedUserName = "ADMIN@ADMIN.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKf+PCT6b6VRTaHfWnRTPtMWkxJ8DSridol82F5wZF3xr87BC9HPLuYC1mvaG4EM0g==",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "",
                            SecurityStamp = "f65670a3-c240-4421-a616-f005dd6bb89f",
                            TwoFactorEnabled = false,
                            UserName = "admin@admin.com"
                        });
                });

            modelBuilder.Entity("TailorWebApp.Domain.Entities.Accounts.AppUserTokens", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime>("RefreshTokenExpiration")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "90dafc5d-922a-4de8-94cf-4538db5586ab",
                            LoginProvider = "Bearer",
                            Name = "JWT",
                            RefreshToken = "",
                            RefreshTokenExpiration = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = ""
                        });
                });

            modelBuilder.Entity("TailorWebApp.Domain.Entities.Locations.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("RegionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("TailorWebApp.Domain.Entities.Locations.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("StateProvice")
                        .HasColumnType("text");

                    b.Property<string>("StreetAdress")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("TailorWebApp.Domain.Entities.Locations.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.ToTable("Regions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Name = "Europe"
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            Name = "America"
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            Name = "Asia"
                        },
                        new
                        {
                            Id = 4,
                            IsDeleted = false,
                            Name = "Middle East and Africa"
                        });
                });

            modelBuilder.Entity("TailorWebApp.Domain.Entities.NewsArticles.News", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Hashtags")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<int>("NewsStatusId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("PublishDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("NewsStatusId");

                    b.ToTable("News");
                });

            modelBuilder.Entity("TailorWebApp.Domain.Entities.NewsArticles.NewsStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("NewsStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Name = "draft"
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            Name = "published"
                        });
                });

            modelBuilder.Entity("TailorWebApp.Domain.Entities.Orders.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("AppointmentEndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("AppointmentStartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("CustomerPhone")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("TailorWebApp.Domain.Entities.Orders.Measurement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("MeasurementName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<float>("MeasurementValue")
                        .HasColumnType("real");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Measurements");
                });

            modelBuilder.Entity("TailorWebApp.Domain.Entities.Orders.OfferedService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<float>("Discount")
                        .HasColumnType("real");

                    b.Property<string>("EstDuration")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Images")
                        .HasColumnType("text");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<int>("ServiceCategoryId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ServiceCategoryId");

                    b.ToTable("OfferedServices");
                });

            modelBuilder.Entity("TailorWebApp.Domain.Entities.Orders.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AsigneeId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EstimatedEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("ManufacturingDetails")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<float?>("TotalCost")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("AsigneeId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("TailorWebApp.Domain.Entities.Orders.ServiceCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("ServiceCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryName = "Alterations",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 2,
                            CategoryName = "Tailoring",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 3,
                            CategoryName = "Repairs",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 4,
                            CategoryName = "DryCleaning",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 5,
                            CategoryName = "Pressing",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 6,
                            CategoryName = "Hemming",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 7,
                            CategoryName = "Zipper Replacement",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 8,
                            CategoryName = "Button Replacement",
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("TailorWebApp.Domain.Entities.Products.JoinEntities.ProductTagJoin", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.HasKey("ProductId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("ProductTagsJoin");
                });

            modelBuilder.Entity("TailorWebApp.Domain.Entities.Products.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Material")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int>("SizeId")
                        .HasColumnType("integer");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SizeId");

                    b.HasIndex("StatusId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("TailorWebApp.Domain.Entities.Products.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.ToTable("ProductCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Name = "SUIT"
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            Name = "VEST"
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            Name = "TROUSER"
                        },
                        new
                        {
                            Id = 4,
                            IsDeleted = false,
                            Name = "SHIRT"
                        },
                        new
                        {
                            Id = 5,
                            IsDeleted = false,
                            Name = "HANDKERCHIEF"
                        },
                        new
                        {
                            Id = 6,
                            IsDeleted = false,
                            Name = "TIE"
                        },
                        new
                        {
                            Id = 7,
                            IsDeleted = false,
                            Name = "BOWTIE"
                        });
                });

            modelBuilder.Entity("TailorWebApp.Domain.Entities.Products.ProductSize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.ToTable("ProductSizes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Name = "XXS"
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            Name = "XS"
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            Name = "S"
                        },
                        new
                        {
                            Id = 4,
                            IsDeleted = false,
                            Name = "M"
                        },
                        new
                        {
                            Id = 5,
                            IsDeleted = false,
                            Name = "L"
                        },
                        new
                        {
                            Id = 6,
                            IsDeleted = false,
                            Name = "XL"
                        },
                        new
                        {
                            Id = 7,
                            IsDeleted = false,
                            Name = "XXL"
                        },
                        new
                        {
                            Id = 8,
                            IsDeleted = false,
                            Name = "XXXL"
                        });
                });

            modelBuilder.Entity("TailorWebApp.Domain.Entities.Products.ProductStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.ToTable("ProductStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Name = "AVAILABLE"
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            Name = "OUTOFSTOCK"
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            Name = "RESERVED"
                        });
                });

            modelBuilder.Entity("TailorWebApp.Domain.Entities.Products.ProductTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.ToTable("ProductTags");
                });

            modelBuilder.Entity("TailorWebApp.Domain.Entities.Products.ProductType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<int>("ProductCategoryId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("ProductTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Name = "CLASSIC SUIT",
                            ProductCategoryId = 1
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            Name = "DINNER SUIT",
                            ProductCategoryId = 1
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            Name = "TAILS SUIT",
                            ProductCategoryId = 1
                        },
                        new
                        {
                            Id = 4,
                            IsDeleted = false,
                            Name = "SPORT SUIT",
                            ProductCategoryId = 1
                        },
                        new
                        {
                            Id = 5,
                            IsDeleted = false,
                            Name = "BLASER SUIT",
                            ProductCategoryId = 1
                        },
                        new
                        {
                            Id = 6,
                            IsDeleted = false,
                            Name = "SINGLE BREASTED VEST",
                            ProductCategoryId = 2
                        },
                        new
                        {
                            Id = 7,
                            IsDeleted = false,
                            Name = "DOUBLE BREASTED VEST",
                            ProductCategoryId = 2
                        },
                        new
                        {
                            Id = 8,
                            IsDeleted = false,
                            Name = "BANDANA HANDKERCHIEF",
                            ProductCategoryId = 5
                        },
                        new
                        {
                            Id = 9,
                            IsDeleted = false,
                            Name = "POCKETSQUARE HANDKERCHIEF",
                            ProductCategoryId = 5
                        },
                        new
                        {
                            Id = 10,
                            IsDeleted = false,
                            Name = "PRINTED HANDKERCHIEF",
                            ProductCategoryId = 5
                        },
                        new
                        {
                            Id = 11,
                            IsDeleted = false,
                            Name = "CASUAL HANDKERCHIEF",
                            ProductCategoryId = 5
                        },
                        new
                        {
                            Id = 12,
                            IsDeleted = false,
                            Name = "FORMAL HANDKERCHIEF",
                            ProductCategoryId = 5
                        },
                        new
                        {
                            Id = 13,
                            IsDeleted = false,
                            Name = "SLIM TROUSER",
                            ProductCategoryId = 3
                        },
                        new
                        {
                            Id = 14,
                            IsDeleted = false,
                            Name = "REGULAR TROUSER",
                            ProductCategoryId = 3
                        },
                        new
                        {
                            Id = 16,
                            IsDeleted = false,
                            Name = "DRESS SHIRT",
                            ProductCategoryId = 4
                        },
                        new
                        {
                            Id = 18,
                            IsDeleted = false,
                            Name = "SKINNY TIE",
                            ProductCategoryId = 6
                        },
                        new
                        {
                            Id = 19,
                            IsDeleted = false,
                            Name = "STANDARD TIE",
                            ProductCategoryId = 6
                        },
                        new
                        {
                            Id = 20,
                            IsDeleted = false,
                            Name = "WIDE TIE",
                            ProductCategoryId = 6
                        },
                        new
                        {
                            Id = 21,
                            IsDeleted = false,
                            Name = "BUTTERFLY BOWTIE",
                            ProductCategoryId = 7
                        },
                        new
                        {
                            Id = 22,
                            IsDeleted = false,
                            Name = "DIAMOND BOWTIE",
                            ProductCategoryId = 7
                        },
                        new
                        {
                            Id = 15,
                            IsDeleted = false,
                            Name = "CLASSIC TROUSER",
                            ProductCategoryId = 3
                        },
                        new
                        {
                            Id = 17,
                            IsDeleted = false,
                            Name = "CASUAL SHIRT",
                            ProductCategoryId = 4
                        });
                });

            modelBuilder.Entity("TailorWebApp.Domain.Entities.StaffRelated.StaffSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("BreakEndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("BreakStartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<int>("DayOfTheWeek")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("StaffSchedules");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TailorWebApp.Domain.Entities.Accounts.AppUserAccount", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TailorWebApp.Domain.Entities.Accounts.AppUserAccount", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TailorWebApp.Domain.Entities.Accounts.AppUserAccount", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TailorWebApp.Domain.Entities.Accounts.AppUserTokens", b =>
                {
                    b.HasOne("TailorWebApp.Domain.Entities.Accounts.AppUserAccount", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TailorWebApp.Domain.Entities.Locations.Country", b =>
                {
                    b.HasOne("TailorWebApp.Domain.Entities.Locations.Region", "Region")
                        .WithMany("Countries")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("TailorWebApp.Domain.Entities.Locations.Location", b =>
                {
                    b.HasOne("TailorWebApp.Domain.Entities.Locations.Country", "Country")
                        .WithMany("Locations")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("TailorWebApp.Domain.Entities.NewsArticles.News", b =>
                {
                    b.HasOne("TailorWebApp.Domain.Entities.NewsArticles.NewsStatus", "NewsStatus")
                        .WithMany("News")
                        .HasForeignKey("NewsStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NewsStatus");
                });

            modelBuilder.Entity("TailorWebApp.Domain.Entities.Orders.Appointment", b =>
                {
                    b.HasOne("TailorWebApp.Domain.Entities.Orders.Order", "Order")
                        .WithMany("Appointments")
                        .HasForeignKey("OrderId");

                    b.HasOne("TailorWebApp.Domain.Entities.Orders.OfferedService", "Service")
                        .WithMany("Appointments")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("TailorWebApp.Domain.Entities.Orders.Measurement", b =>
                {
                    b.HasOne("TailorWebApp.Domain.Entities.Orders.Order", "Order")
                        .WithMany("Measurements")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("TailorWebApp.Domain.Entities.Orders.OfferedService", b =>
                {
                    b.HasOne("TailorWebApp.Domain.Entities.Orders.ServiceCategory", "ServiceCategory")
                        .WithMany("OfferedServices")
                        .HasForeignKey("ServiceCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceCategory");
                });

            modelBuilder.Entity("TailorWebApp.Domain.Entities.Orders.Order", b =>
                {
                    b.HasOne("TailorWebApp.Domain.Entities.Accounts.AppUserAccount", "EmployeeAccount")
                        .WithMany("Orders")
                        .HasForeignKey("AsigneeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TailorWebApp.Domain.Entities.Products.Product", "Product")
                        .WithMany("Orders")
                        .HasForeignKey("ProductId");

                    b.HasOne("TailorWebApp.Domain.Entities.Orders.OfferedService", "Service")
                        .WithMany("Orders")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeAccount");

                    b.Navigation("Product");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("TailorWebApp.Domain.Entities.Products.JoinEntities.ProductTagJoin", b =>
                {
                    b.HasOne("TailorWebApp.Domain.Entities.Products.Product", "Product")
                        .WithMany("Tags")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TailorWebApp.Domain.Entities.Products.ProductTag", "Tag")
                        .WithMany("Products")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("TailorWebApp.Domain.Entities.Products.Product", b =>
                {
                    b.HasOne("TailorWebApp.Domain.Entities.Products.ProductCategory", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TailorWebApp.Domain.Entities.Products.ProductSize", "Size")
                        .WithMany("Products")
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TailorWebApp.Domain.Entities.Products.ProductStatus", "Status")
                        .WithMany("Products")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Size");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("TailorWebApp.Domain.Entities.Products.ProductType", b =>
                {
                    b.HasOne("TailorWebApp.Domain.Entities.Products.ProductCategory", "ProductCategory")
                        .WithMany("ProductTypes")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("TailorWebApp.Domain.Entities.Accounts.AppUserAccount", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("TailorWebApp.Domain.Entities.Locations.Country", b =>
                {
                    b.Navigation("Locations");
                });

            modelBuilder.Entity("TailorWebApp.Domain.Entities.Locations.Region", b =>
                {
                    b.Navigation("Countries");
                });

            modelBuilder.Entity("TailorWebApp.Domain.Entities.NewsArticles.NewsStatus", b =>
                {
                    b.Navigation("News");
                });

            modelBuilder.Entity("TailorWebApp.Domain.Entities.Orders.OfferedService", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("TailorWebApp.Domain.Entities.Orders.Order", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Measurements");
                });

            modelBuilder.Entity("TailorWebApp.Domain.Entities.Orders.ServiceCategory", b =>
                {
                    b.Navigation("OfferedServices");
                });

            modelBuilder.Entity("TailorWebApp.Domain.Entities.Products.Product", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("TailorWebApp.Domain.Entities.Products.ProductCategory", b =>
                {
                    b.Navigation("ProductTypes");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("TailorWebApp.Domain.Entities.Products.ProductSize", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("TailorWebApp.Domain.Entities.Products.ProductStatus", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("TailorWebApp.Domain.Entities.Products.ProductTag", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
